/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.eclipse.epsilon.cbp.resource.thrift.structs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TCreateEObjectEvent implements org.apache.thrift.TBase<TCreateEObjectEvent, TCreateEObjectEvent._Fields>, java.io.Serializable, Cloneable, Comparable<TCreateEObjectEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCreateEObjectEvent");

  private static final org.apache.thrift.protocol.TField E_PACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ePackage", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField E_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("eClass", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCreateEObjectEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCreateEObjectEventTupleSchemeFactory());
  }

  public String ePackage; // required
  public String eClass; // required
  public long id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    E_PACKAGE((short)1, "ePackage"),
    E_CLASS((short)2, "eClass"),
    ID((short)3, "id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // E_PACKAGE
          return E_PACKAGE;
        case 2: // E_CLASS
          return E_CLASS;
        case 3: // ID
          return ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.E_PACKAGE, new org.apache.thrift.meta_data.FieldMetaData("ePackage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_CLASS, new org.apache.thrift.meta_data.FieldMetaData("eClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCreateEObjectEvent.class, metaDataMap);
  }

  public TCreateEObjectEvent() {
  }

  public TCreateEObjectEvent(
    String ePackage,
    String eClass,
    long id)
  {
    this();
    this.ePackage = ePackage;
    this.eClass = eClass;
    this.id = id;
    setIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCreateEObjectEvent(TCreateEObjectEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetEPackage()) {
      this.ePackage = other.ePackage;
    }
    if (other.isSetEClass()) {
      this.eClass = other.eClass;
    }
    this.id = other.id;
  }

  public TCreateEObjectEvent deepCopy() {
    return new TCreateEObjectEvent(this);
  }

  @Override
  public void clear() {
    this.ePackage = null;
    this.eClass = null;
    setIdIsSet(false);
    this.id = 0;
  }

  public String getEPackage() {
    return this.ePackage;
  }

  public TCreateEObjectEvent setEPackage(String ePackage) {
    this.ePackage = ePackage;
    return this;
  }

  public void unsetEPackage() {
    this.ePackage = null;
  }

  /** Returns true if field ePackage is set (has been assigned a value) and false otherwise */
  public boolean isSetEPackage() {
    return this.ePackage != null;
  }

  public void setEPackageIsSet(boolean value) {
    if (!value) {
      this.ePackage = null;
    }
  }

  public String getEClass() {
    return this.eClass;
  }

  public TCreateEObjectEvent setEClass(String eClass) {
    this.eClass = eClass;
    return this;
  }

  public void unsetEClass() {
    this.eClass = null;
  }

  /** Returns true if field eClass is set (has been assigned a value) and false otherwise */
  public boolean isSetEClass() {
    return this.eClass != null;
  }

  public void setEClassIsSet(boolean value) {
    if (!value) {
      this.eClass = null;
    }
  }

  public long getId() {
    return this.id;
  }

  public TCreateEObjectEvent setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case E_PACKAGE:
      if (value == null) {
        unsetEPackage();
      } else {
        setEPackage((String)value);
      }
      break;

    case E_CLASS:
      if (value == null) {
        unsetEClass();
      } else {
        setEClass((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case E_PACKAGE:
      return getEPackage();

    case E_CLASS:
      return getEClass();

    case ID:
      return Long.valueOf(getId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case E_PACKAGE:
      return isSetEPackage();
    case E_CLASS:
      return isSetEClass();
    case ID:
      return isSetId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCreateEObjectEvent)
      return this.equals((TCreateEObjectEvent)that);
    return false;
  }

  public boolean equals(TCreateEObjectEvent that) {
    if (that == null)
      return false;

    boolean this_present_ePackage = true && this.isSetEPackage();
    boolean that_present_ePackage = true && that.isSetEPackage();
    if (this_present_ePackage || that_present_ePackage) {
      if (!(this_present_ePackage && that_present_ePackage))
        return false;
      if (!this.ePackage.equals(that.ePackage))
        return false;
    }

    boolean this_present_eClass = true && this.isSetEClass();
    boolean that_present_eClass = true && that.isSetEClass();
    if (this_present_eClass || that_present_eClass) {
      if (!(this_present_eClass && that_present_eClass))
        return false;
      if (!this.eClass.equals(that.eClass))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TCreateEObjectEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEPackage()).compareTo(other.isSetEPackage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEPackage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ePackage, other.ePackage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEClass()).compareTo(other.isSetEClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eClass, other.eClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCreateEObjectEvent(");
    boolean first = true;

    sb.append("ePackage:");
    if (this.ePackage == null) {
      sb.append("null");
    } else {
      sb.append(this.ePackage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eClass:");
    if (this.eClass == null) {
      sb.append("null");
    } else {
      sb.append(this.eClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ePackage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ePackage' was not present! Struct: " + toString());
    }
    if (eClass == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'eClass' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCreateEObjectEventStandardSchemeFactory implements SchemeFactory {
    public TCreateEObjectEventStandardScheme getScheme() {
      return new TCreateEObjectEventStandardScheme();
    }
  }

  private static class TCreateEObjectEventStandardScheme extends StandardScheme<TCreateEObjectEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCreateEObjectEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // E_PACKAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ePackage = iprot.readString();
              struct.setEPackageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // E_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eClass = iprot.readString();
              struct.setEClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCreateEObjectEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ePackage != null) {
        oprot.writeFieldBegin(E_PACKAGE_FIELD_DESC);
        oprot.writeString(struct.ePackage);
        oprot.writeFieldEnd();
      }
      if (struct.eClass != null) {
        oprot.writeFieldBegin(E_CLASS_FIELD_DESC);
        oprot.writeString(struct.eClass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCreateEObjectEventTupleSchemeFactory implements SchemeFactory {
    public TCreateEObjectEventTupleScheme getScheme() {
      return new TCreateEObjectEventTupleScheme();
    }
  }

  private static class TCreateEObjectEventTupleScheme extends TupleScheme<TCreateEObjectEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCreateEObjectEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.ePackage);
      oprot.writeString(struct.eClass);
      oprot.writeI64(struct.id);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCreateEObjectEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.ePackage = iprot.readString();
      struct.setEPackageIsSet(true);
      struct.eClass = iprot.readString();
      struct.setEClassIsSet(true);
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
    }
  }

}

