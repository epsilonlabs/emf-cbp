/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.eclipse.epsilon.cbp.resource.thrift.structs;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TChangeEvent extends org.apache.thrift.TUnion<TChangeEvent, TChangeEvent._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TChangeEvent");
  private static final org.apache.thrift.protocol.TField CREATE_EOBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("createEObject", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ADD_TO_EATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("addToEAttribute", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SET_EATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("setEAttribute", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField MOVE_WITHIN_EATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("moveWithinEAttribute", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField REMOVE_FROM_EATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("removeFromEAttribute", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField UNSET_EATTRIBUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("unsetEAttribute", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ADD_TO_EREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("addToEReference", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MOVE_WITHIN_EREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("moveWithinEReference", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField REMOVE_FROM_EREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("removeFromEReference", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SET_EREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("setEReference", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField UNSET_EREFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("unsetEReference", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField REGISTER_EPACKAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("registerEPackage", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField ADD_TO_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("addToResource", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField REMOVE_FROM_RESOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("removeFromResource", org.apache.thrift.protocol.TType.STRUCT, (short)14);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATE_EOBJECT((short)1, "createEObject"),
    ADD_TO_EATTRIBUTE((short)2, "addToEAttribute"),
    SET_EATTRIBUTE((short)3, "setEAttribute"),
    MOVE_WITHIN_EATTRIBUTE((short)4, "moveWithinEAttribute"),
    REMOVE_FROM_EATTRIBUTE((short)5, "removeFromEAttribute"),
    UNSET_EATTRIBUTE((short)6, "unsetEAttribute"),
    ADD_TO_EREFERENCE((short)7, "addToEReference"),
    MOVE_WITHIN_EREFERENCE((short)8, "moveWithinEReference"),
    REMOVE_FROM_EREFERENCE((short)9, "removeFromEReference"),
    SET_EREFERENCE((short)10, "setEReference"),
    UNSET_EREFERENCE((short)11, "unsetEReference"),
    REGISTER_EPACKAGE((short)12, "registerEPackage"),
    ADD_TO_RESOURCE((short)13, "addToResource"),
    REMOVE_FROM_RESOURCE((short)14, "removeFromResource");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATE_EOBJECT
          return CREATE_EOBJECT;
        case 2: // ADD_TO_EATTRIBUTE
          return ADD_TO_EATTRIBUTE;
        case 3: // SET_EATTRIBUTE
          return SET_EATTRIBUTE;
        case 4: // MOVE_WITHIN_EATTRIBUTE
          return MOVE_WITHIN_EATTRIBUTE;
        case 5: // REMOVE_FROM_EATTRIBUTE
          return REMOVE_FROM_EATTRIBUTE;
        case 6: // UNSET_EATTRIBUTE
          return UNSET_EATTRIBUTE;
        case 7: // ADD_TO_EREFERENCE
          return ADD_TO_EREFERENCE;
        case 8: // MOVE_WITHIN_EREFERENCE
          return MOVE_WITHIN_EREFERENCE;
        case 9: // REMOVE_FROM_EREFERENCE
          return REMOVE_FROM_EREFERENCE;
        case 10: // SET_EREFERENCE
          return SET_EREFERENCE;
        case 11: // UNSET_EREFERENCE
          return UNSET_EREFERENCE;
        case 12: // REGISTER_EPACKAGE
          return REGISTER_EPACKAGE;
        case 13: // ADD_TO_RESOURCE
          return ADD_TO_RESOURCE;
        case 14: // REMOVE_FROM_RESOURCE
          return REMOVE_FROM_RESOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATE_EOBJECT, new org.apache.thrift.meta_data.FieldMetaData("createEObject", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCreateEObjectEvent.class)));
    tmpMap.put(_Fields.ADD_TO_EATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("addToEAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddToEAttributeEvent.class)));
    tmpMap.put(_Fields.SET_EATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("setEAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSetEAttributeEvent.class)));
    tmpMap.put(_Fields.MOVE_WITHIN_EATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("moveWithinEAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMoveWithinEAttributeEvent.class)));
    tmpMap.put(_Fields.REMOVE_FROM_EATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("removeFromEAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRemoveFromEAttributeEvent.class)));
    tmpMap.put(_Fields.UNSET_EATTRIBUTE, new org.apache.thrift.meta_data.FieldMetaData("unsetEAttribute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnsetEAttributeEvent.class)));
    tmpMap.put(_Fields.ADD_TO_EREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("addToEReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddToEReferenceEvent.class)));
    tmpMap.put(_Fields.MOVE_WITHIN_EREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("moveWithinEReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMoveWithinEReferenceEvent.class)));
    tmpMap.put(_Fields.REMOVE_FROM_EREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("removeFromEReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRemoveFromEReferenceEvent.class)));
    tmpMap.put(_Fields.SET_EREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("setEReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSetEReferenceEvent.class)));
    tmpMap.put(_Fields.UNSET_EREFERENCE, new org.apache.thrift.meta_data.FieldMetaData("unsetEReference", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TUnsetEReferenceEvent.class)));
    tmpMap.put(_Fields.REGISTER_EPACKAGE, new org.apache.thrift.meta_data.FieldMetaData("registerEPackage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRegisterEPackageEvent.class)));
    tmpMap.put(_Fields.ADD_TO_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("addToResource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAddToResourceEvent.class)));
    tmpMap.put(_Fields.REMOVE_FROM_RESOURCE, new org.apache.thrift.meta_data.FieldMetaData("removeFromResource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRemoveFromResourceEvent.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TChangeEvent.class, metaDataMap);
  }

  public TChangeEvent() {
    super();
  }

  public TChangeEvent(_Fields setField, Object value) {
    super(setField, value);
  }

  public TChangeEvent(TChangeEvent other) {
    super(other);
  }
  public TChangeEvent deepCopy() {
    return new TChangeEvent(this);
  }

  public static TChangeEvent createEObject(TCreateEObjectEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setCreateEObject(value);
    return x;
  }

  public static TChangeEvent addToEAttribute(TAddToEAttributeEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setAddToEAttribute(value);
    return x;
  }

  public static TChangeEvent setEAttribute(TSetEAttributeEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setSetEAttribute(value);
    return x;
  }

  public static TChangeEvent moveWithinEAttribute(TMoveWithinEAttributeEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setMoveWithinEAttribute(value);
    return x;
  }

  public static TChangeEvent removeFromEAttribute(TRemoveFromEAttributeEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setRemoveFromEAttribute(value);
    return x;
  }

  public static TChangeEvent unsetEAttribute(TUnsetEAttributeEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setUnsetEAttribute(value);
    return x;
  }

  public static TChangeEvent addToEReference(TAddToEReferenceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setAddToEReference(value);
    return x;
  }

  public static TChangeEvent moveWithinEReference(TMoveWithinEReferenceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setMoveWithinEReference(value);
    return x;
  }

  public static TChangeEvent removeFromEReference(TRemoveFromEReferenceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setRemoveFromEReference(value);
    return x;
  }

  public static TChangeEvent setEReference(TSetEReferenceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setSetEReference(value);
    return x;
  }

  public static TChangeEvent unsetEReference(TUnsetEReferenceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setUnsetEReference(value);
    return x;
  }

  public static TChangeEvent registerEPackage(TRegisterEPackageEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setRegisterEPackage(value);
    return x;
  }

  public static TChangeEvent addToResource(TAddToResourceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setAddToResource(value);
    return x;
  }

  public static TChangeEvent removeFromResource(TRemoveFromResourceEvent value) {
    TChangeEvent x = new TChangeEvent();
    x.setRemoveFromResource(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case CREATE_EOBJECT:
        if (value instanceof TCreateEObjectEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TCreateEObjectEvent for field 'createEObject', but got " + value.getClass().getSimpleName());
      case ADD_TO_EATTRIBUTE:
        if (value instanceof TAddToEAttributeEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TAddToEAttributeEvent for field 'addToEAttribute', but got " + value.getClass().getSimpleName());
      case SET_EATTRIBUTE:
        if (value instanceof TSetEAttributeEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TSetEAttributeEvent for field 'setEAttribute', but got " + value.getClass().getSimpleName());
      case MOVE_WITHIN_EATTRIBUTE:
        if (value instanceof TMoveWithinEAttributeEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TMoveWithinEAttributeEvent for field 'moveWithinEAttribute', but got " + value.getClass().getSimpleName());
      case REMOVE_FROM_EATTRIBUTE:
        if (value instanceof TRemoveFromEAttributeEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TRemoveFromEAttributeEvent for field 'removeFromEAttribute', but got " + value.getClass().getSimpleName());
      case UNSET_EATTRIBUTE:
        if (value instanceof TUnsetEAttributeEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TUnsetEAttributeEvent for field 'unsetEAttribute', but got " + value.getClass().getSimpleName());
      case ADD_TO_EREFERENCE:
        if (value instanceof TAddToEReferenceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TAddToEReferenceEvent for field 'addToEReference', but got " + value.getClass().getSimpleName());
      case MOVE_WITHIN_EREFERENCE:
        if (value instanceof TMoveWithinEReferenceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TMoveWithinEReferenceEvent for field 'moveWithinEReference', but got " + value.getClass().getSimpleName());
      case REMOVE_FROM_EREFERENCE:
        if (value instanceof TRemoveFromEReferenceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TRemoveFromEReferenceEvent for field 'removeFromEReference', but got " + value.getClass().getSimpleName());
      case SET_EREFERENCE:
        if (value instanceof TSetEReferenceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TSetEReferenceEvent for field 'setEReference', but got " + value.getClass().getSimpleName());
      case UNSET_EREFERENCE:
        if (value instanceof TUnsetEReferenceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TUnsetEReferenceEvent for field 'unsetEReference', but got " + value.getClass().getSimpleName());
      case REGISTER_EPACKAGE:
        if (value instanceof TRegisterEPackageEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TRegisterEPackageEvent for field 'registerEPackage', but got " + value.getClass().getSimpleName());
      case ADD_TO_RESOURCE:
        if (value instanceof TAddToResourceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TAddToResourceEvent for field 'addToResource', but got " + value.getClass().getSimpleName());
      case REMOVE_FROM_RESOURCE:
        if (value instanceof TRemoveFromResourceEvent) {
          break;
        }
        throw new ClassCastException("Was expecting value of type TRemoveFromResourceEvent for field 'removeFromResource', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case CREATE_EOBJECT:
          if (field.type == CREATE_EOBJECT_FIELD_DESC.type) {
            TCreateEObjectEvent createEObject;
            createEObject = new TCreateEObjectEvent();
            createEObject.read(iprot);
            return createEObject;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_TO_EATTRIBUTE:
          if (field.type == ADD_TO_EATTRIBUTE_FIELD_DESC.type) {
            TAddToEAttributeEvent addToEAttribute;
            addToEAttribute = new TAddToEAttributeEvent();
            addToEAttribute.read(iprot);
            return addToEAttribute;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_EATTRIBUTE:
          if (field.type == SET_EATTRIBUTE_FIELD_DESC.type) {
            TSetEAttributeEvent setEAttribute;
            setEAttribute = new TSetEAttributeEvent();
            setEAttribute.read(iprot);
            return setEAttribute;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MOVE_WITHIN_EATTRIBUTE:
          if (field.type == MOVE_WITHIN_EATTRIBUTE_FIELD_DESC.type) {
            TMoveWithinEAttributeEvent moveWithinEAttribute;
            moveWithinEAttribute = new TMoveWithinEAttributeEvent();
            moveWithinEAttribute.read(iprot);
            return moveWithinEAttribute;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_FROM_EATTRIBUTE:
          if (field.type == REMOVE_FROM_EATTRIBUTE_FIELD_DESC.type) {
            TRemoveFromEAttributeEvent removeFromEAttribute;
            removeFromEAttribute = new TRemoveFromEAttributeEvent();
            removeFromEAttribute.read(iprot);
            return removeFromEAttribute;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNSET_EATTRIBUTE:
          if (field.type == UNSET_EATTRIBUTE_FIELD_DESC.type) {
            TUnsetEAttributeEvent unsetEAttribute;
            unsetEAttribute = new TUnsetEAttributeEvent();
            unsetEAttribute.read(iprot);
            return unsetEAttribute;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_TO_EREFERENCE:
          if (field.type == ADD_TO_EREFERENCE_FIELD_DESC.type) {
            TAddToEReferenceEvent addToEReference;
            addToEReference = new TAddToEReferenceEvent();
            addToEReference.read(iprot);
            return addToEReference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MOVE_WITHIN_EREFERENCE:
          if (field.type == MOVE_WITHIN_EREFERENCE_FIELD_DESC.type) {
            TMoveWithinEReferenceEvent moveWithinEReference;
            moveWithinEReference = new TMoveWithinEReferenceEvent();
            moveWithinEReference.read(iprot);
            return moveWithinEReference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_FROM_EREFERENCE:
          if (field.type == REMOVE_FROM_EREFERENCE_FIELD_DESC.type) {
            TRemoveFromEReferenceEvent removeFromEReference;
            removeFromEReference = new TRemoveFromEReferenceEvent();
            removeFromEReference.read(iprot);
            return removeFromEReference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_EREFERENCE:
          if (field.type == SET_EREFERENCE_FIELD_DESC.type) {
            TSetEReferenceEvent setEReference;
            setEReference = new TSetEReferenceEvent();
            setEReference.read(iprot);
            return setEReference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case UNSET_EREFERENCE:
          if (field.type == UNSET_EREFERENCE_FIELD_DESC.type) {
            TUnsetEReferenceEvent unsetEReference;
            unsetEReference = new TUnsetEReferenceEvent();
            unsetEReference.read(iprot);
            return unsetEReference;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REGISTER_EPACKAGE:
          if (field.type == REGISTER_EPACKAGE_FIELD_DESC.type) {
            TRegisterEPackageEvent registerEPackage;
            registerEPackage = new TRegisterEPackageEvent();
            registerEPackage.read(iprot);
            return registerEPackage;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ADD_TO_RESOURCE:
          if (field.type == ADD_TO_RESOURCE_FIELD_DESC.type) {
            TAddToResourceEvent addToResource;
            addToResource = new TAddToResourceEvent();
            addToResource.read(iprot);
            return addToResource;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case REMOVE_FROM_RESOURCE:
          if (field.type == REMOVE_FROM_RESOURCE_FIELD_DESC.type) {
            TRemoveFromResourceEvent removeFromResource;
            removeFromResource = new TRemoveFromResourceEvent();
            removeFromResource.read(iprot);
            return removeFromResource;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case CREATE_EOBJECT:
        TCreateEObjectEvent createEObject = (TCreateEObjectEvent)value_;
        createEObject.write(oprot);
        return;
      case ADD_TO_EATTRIBUTE:
        TAddToEAttributeEvent addToEAttribute = (TAddToEAttributeEvent)value_;
        addToEAttribute.write(oprot);
        return;
      case SET_EATTRIBUTE:
        TSetEAttributeEvent setEAttribute = (TSetEAttributeEvent)value_;
        setEAttribute.write(oprot);
        return;
      case MOVE_WITHIN_EATTRIBUTE:
        TMoveWithinEAttributeEvent moveWithinEAttribute = (TMoveWithinEAttributeEvent)value_;
        moveWithinEAttribute.write(oprot);
        return;
      case REMOVE_FROM_EATTRIBUTE:
        TRemoveFromEAttributeEvent removeFromEAttribute = (TRemoveFromEAttributeEvent)value_;
        removeFromEAttribute.write(oprot);
        return;
      case UNSET_EATTRIBUTE:
        TUnsetEAttributeEvent unsetEAttribute = (TUnsetEAttributeEvent)value_;
        unsetEAttribute.write(oprot);
        return;
      case ADD_TO_EREFERENCE:
        TAddToEReferenceEvent addToEReference = (TAddToEReferenceEvent)value_;
        addToEReference.write(oprot);
        return;
      case MOVE_WITHIN_EREFERENCE:
        TMoveWithinEReferenceEvent moveWithinEReference = (TMoveWithinEReferenceEvent)value_;
        moveWithinEReference.write(oprot);
        return;
      case REMOVE_FROM_EREFERENCE:
        TRemoveFromEReferenceEvent removeFromEReference = (TRemoveFromEReferenceEvent)value_;
        removeFromEReference.write(oprot);
        return;
      case SET_EREFERENCE:
        TSetEReferenceEvent setEReference = (TSetEReferenceEvent)value_;
        setEReference.write(oprot);
        return;
      case UNSET_EREFERENCE:
        TUnsetEReferenceEvent unsetEReference = (TUnsetEReferenceEvent)value_;
        unsetEReference.write(oprot);
        return;
      case REGISTER_EPACKAGE:
        TRegisterEPackageEvent registerEPackage = (TRegisterEPackageEvent)value_;
        registerEPackage.write(oprot);
        return;
      case ADD_TO_RESOURCE:
        TAddToResourceEvent addToResource = (TAddToResourceEvent)value_;
        addToResource.write(oprot);
        return;
      case REMOVE_FROM_RESOURCE:
        TRemoveFromResourceEvent removeFromResource = (TRemoveFromResourceEvent)value_;
        removeFromResource.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case CREATE_EOBJECT:
          TCreateEObjectEvent createEObject;
          createEObject = new TCreateEObjectEvent();
          createEObject.read(iprot);
          return createEObject;
        case ADD_TO_EATTRIBUTE:
          TAddToEAttributeEvent addToEAttribute;
          addToEAttribute = new TAddToEAttributeEvent();
          addToEAttribute.read(iprot);
          return addToEAttribute;
        case SET_EATTRIBUTE:
          TSetEAttributeEvent setEAttribute;
          setEAttribute = new TSetEAttributeEvent();
          setEAttribute.read(iprot);
          return setEAttribute;
        case MOVE_WITHIN_EATTRIBUTE:
          TMoveWithinEAttributeEvent moveWithinEAttribute;
          moveWithinEAttribute = new TMoveWithinEAttributeEvent();
          moveWithinEAttribute.read(iprot);
          return moveWithinEAttribute;
        case REMOVE_FROM_EATTRIBUTE:
          TRemoveFromEAttributeEvent removeFromEAttribute;
          removeFromEAttribute = new TRemoveFromEAttributeEvent();
          removeFromEAttribute.read(iprot);
          return removeFromEAttribute;
        case UNSET_EATTRIBUTE:
          TUnsetEAttributeEvent unsetEAttribute;
          unsetEAttribute = new TUnsetEAttributeEvent();
          unsetEAttribute.read(iprot);
          return unsetEAttribute;
        case ADD_TO_EREFERENCE:
          TAddToEReferenceEvent addToEReference;
          addToEReference = new TAddToEReferenceEvent();
          addToEReference.read(iprot);
          return addToEReference;
        case MOVE_WITHIN_EREFERENCE:
          TMoveWithinEReferenceEvent moveWithinEReference;
          moveWithinEReference = new TMoveWithinEReferenceEvent();
          moveWithinEReference.read(iprot);
          return moveWithinEReference;
        case REMOVE_FROM_EREFERENCE:
          TRemoveFromEReferenceEvent removeFromEReference;
          removeFromEReference = new TRemoveFromEReferenceEvent();
          removeFromEReference.read(iprot);
          return removeFromEReference;
        case SET_EREFERENCE:
          TSetEReferenceEvent setEReference;
          setEReference = new TSetEReferenceEvent();
          setEReference.read(iprot);
          return setEReference;
        case UNSET_EREFERENCE:
          TUnsetEReferenceEvent unsetEReference;
          unsetEReference = new TUnsetEReferenceEvent();
          unsetEReference.read(iprot);
          return unsetEReference;
        case REGISTER_EPACKAGE:
          TRegisterEPackageEvent registerEPackage;
          registerEPackage = new TRegisterEPackageEvent();
          registerEPackage.read(iprot);
          return registerEPackage;
        case ADD_TO_RESOURCE:
          TAddToResourceEvent addToResource;
          addToResource = new TAddToResourceEvent();
          addToResource.read(iprot);
          return addToResource;
        case REMOVE_FROM_RESOURCE:
          TRemoveFromResourceEvent removeFromResource;
          removeFromResource = new TRemoveFromResourceEvent();
          removeFromResource.read(iprot);
          return removeFromResource;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case CREATE_EOBJECT:
        TCreateEObjectEvent createEObject = (TCreateEObjectEvent)value_;
        createEObject.write(oprot);
        return;
      case ADD_TO_EATTRIBUTE:
        TAddToEAttributeEvent addToEAttribute = (TAddToEAttributeEvent)value_;
        addToEAttribute.write(oprot);
        return;
      case SET_EATTRIBUTE:
        TSetEAttributeEvent setEAttribute = (TSetEAttributeEvent)value_;
        setEAttribute.write(oprot);
        return;
      case MOVE_WITHIN_EATTRIBUTE:
        TMoveWithinEAttributeEvent moveWithinEAttribute = (TMoveWithinEAttributeEvent)value_;
        moveWithinEAttribute.write(oprot);
        return;
      case REMOVE_FROM_EATTRIBUTE:
        TRemoveFromEAttributeEvent removeFromEAttribute = (TRemoveFromEAttributeEvent)value_;
        removeFromEAttribute.write(oprot);
        return;
      case UNSET_EATTRIBUTE:
        TUnsetEAttributeEvent unsetEAttribute = (TUnsetEAttributeEvent)value_;
        unsetEAttribute.write(oprot);
        return;
      case ADD_TO_EREFERENCE:
        TAddToEReferenceEvent addToEReference = (TAddToEReferenceEvent)value_;
        addToEReference.write(oprot);
        return;
      case MOVE_WITHIN_EREFERENCE:
        TMoveWithinEReferenceEvent moveWithinEReference = (TMoveWithinEReferenceEvent)value_;
        moveWithinEReference.write(oprot);
        return;
      case REMOVE_FROM_EREFERENCE:
        TRemoveFromEReferenceEvent removeFromEReference = (TRemoveFromEReferenceEvent)value_;
        removeFromEReference.write(oprot);
        return;
      case SET_EREFERENCE:
        TSetEReferenceEvent setEReference = (TSetEReferenceEvent)value_;
        setEReference.write(oprot);
        return;
      case UNSET_EREFERENCE:
        TUnsetEReferenceEvent unsetEReference = (TUnsetEReferenceEvent)value_;
        unsetEReference.write(oprot);
        return;
      case REGISTER_EPACKAGE:
        TRegisterEPackageEvent registerEPackage = (TRegisterEPackageEvent)value_;
        registerEPackage.write(oprot);
        return;
      case ADD_TO_RESOURCE:
        TAddToResourceEvent addToResource = (TAddToResourceEvent)value_;
        addToResource.write(oprot);
        return;
      case REMOVE_FROM_RESOURCE:
        TRemoveFromResourceEvent removeFromResource = (TRemoveFromResourceEvent)value_;
        removeFromResource.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case CREATE_EOBJECT:
        return CREATE_EOBJECT_FIELD_DESC;
      case ADD_TO_EATTRIBUTE:
        return ADD_TO_EATTRIBUTE_FIELD_DESC;
      case SET_EATTRIBUTE:
        return SET_EATTRIBUTE_FIELD_DESC;
      case MOVE_WITHIN_EATTRIBUTE:
        return MOVE_WITHIN_EATTRIBUTE_FIELD_DESC;
      case REMOVE_FROM_EATTRIBUTE:
        return REMOVE_FROM_EATTRIBUTE_FIELD_DESC;
      case UNSET_EATTRIBUTE:
        return UNSET_EATTRIBUTE_FIELD_DESC;
      case ADD_TO_EREFERENCE:
        return ADD_TO_EREFERENCE_FIELD_DESC;
      case MOVE_WITHIN_EREFERENCE:
        return MOVE_WITHIN_EREFERENCE_FIELD_DESC;
      case REMOVE_FROM_EREFERENCE:
        return REMOVE_FROM_EREFERENCE_FIELD_DESC;
      case SET_EREFERENCE:
        return SET_EREFERENCE_FIELD_DESC;
      case UNSET_EREFERENCE:
        return UNSET_EREFERENCE_FIELD_DESC;
      case REGISTER_EPACKAGE:
        return REGISTER_EPACKAGE_FIELD_DESC;
      case ADD_TO_RESOURCE:
        return ADD_TO_RESOURCE_FIELD_DESC;
      case REMOVE_FROM_RESOURCE:
        return REMOVE_FROM_RESOURCE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public TCreateEObjectEvent getCreateEObject() {
    if (getSetField() == _Fields.CREATE_EOBJECT) {
      return (TCreateEObjectEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'createEObject' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCreateEObject(TCreateEObjectEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CREATE_EOBJECT;
    value_ = value;
  }

  public TAddToEAttributeEvent getAddToEAttribute() {
    if (getSetField() == _Fields.ADD_TO_EATTRIBUTE) {
      return (TAddToEAttributeEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addToEAttribute' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddToEAttribute(TAddToEAttributeEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_TO_EATTRIBUTE;
    value_ = value;
  }

  public TSetEAttributeEvent getSetEAttribute() {
    if (getSetField() == _Fields.SET_EATTRIBUTE) {
      return (TSetEAttributeEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'setEAttribute' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSetEAttribute(TSetEAttributeEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SET_EATTRIBUTE;
    value_ = value;
  }

  public TMoveWithinEAttributeEvent getMoveWithinEAttribute() {
    if (getSetField() == _Fields.MOVE_WITHIN_EATTRIBUTE) {
      return (TMoveWithinEAttributeEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'moveWithinEAttribute' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMoveWithinEAttribute(TMoveWithinEAttributeEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MOVE_WITHIN_EATTRIBUTE;
    value_ = value;
  }

  public TRemoveFromEAttributeEvent getRemoveFromEAttribute() {
    if (getSetField() == _Fields.REMOVE_FROM_EATTRIBUTE) {
      return (TRemoveFromEAttributeEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeFromEAttribute' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveFromEAttribute(TRemoveFromEAttributeEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_FROM_EATTRIBUTE;
    value_ = value;
  }

  public TUnsetEAttributeEvent getUnsetEAttribute() {
    if (getSetField() == _Fields.UNSET_EATTRIBUTE) {
      return (TUnsetEAttributeEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unsetEAttribute' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnsetEAttribute(TUnsetEAttributeEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNSET_EATTRIBUTE;
    value_ = value;
  }

  public TAddToEReferenceEvent getAddToEReference() {
    if (getSetField() == _Fields.ADD_TO_EREFERENCE) {
      return (TAddToEReferenceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addToEReference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddToEReference(TAddToEReferenceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_TO_EREFERENCE;
    value_ = value;
  }

  public TMoveWithinEReferenceEvent getMoveWithinEReference() {
    if (getSetField() == _Fields.MOVE_WITHIN_EREFERENCE) {
      return (TMoveWithinEReferenceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'moveWithinEReference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMoveWithinEReference(TMoveWithinEReferenceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MOVE_WITHIN_EREFERENCE;
    value_ = value;
  }

  public TRemoveFromEReferenceEvent getRemoveFromEReference() {
    if (getSetField() == _Fields.REMOVE_FROM_EREFERENCE) {
      return (TRemoveFromEReferenceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeFromEReference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveFromEReference(TRemoveFromEReferenceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_FROM_EREFERENCE;
    value_ = value;
  }

  public TSetEReferenceEvent getSetEReference() {
    if (getSetField() == _Fields.SET_EREFERENCE) {
      return (TSetEReferenceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'setEReference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSetEReference(TSetEReferenceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SET_EREFERENCE;
    value_ = value;
  }

  public TUnsetEReferenceEvent getUnsetEReference() {
    if (getSetField() == _Fields.UNSET_EREFERENCE) {
      return (TUnsetEReferenceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'unsetEReference' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setUnsetEReference(TUnsetEReferenceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.UNSET_EREFERENCE;
    value_ = value;
  }

  public TRegisterEPackageEvent getRegisterEPackage() {
    if (getSetField() == _Fields.REGISTER_EPACKAGE) {
      return (TRegisterEPackageEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'registerEPackage' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRegisterEPackage(TRegisterEPackageEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REGISTER_EPACKAGE;
    value_ = value;
  }

  public TAddToResourceEvent getAddToResource() {
    if (getSetField() == _Fields.ADD_TO_RESOURCE) {
      return (TAddToResourceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'addToResource' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAddToResource(TAddToResourceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ADD_TO_RESOURCE;
    value_ = value;
  }

  public TRemoveFromResourceEvent getRemoveFromResource() {
    if (getSetField() == _Fields.REMOVE_FROM_RESOURCE) {
      return (TRemoveFromResourceEvent)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'removeFromResource' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRemoveFromResource(TRemoveFromResourceEvent value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REMOVE_FROM_RESOURCE;
    value_ = value;
  }

  public boolean isSetCreateEObject() {
    return setField_ == _Fields.CREATE_EOBJECT;
  }


  public boolean isSetAddToEAttribute() {
    return setField_ == _Fields.ADD_TO_EATTRIBUTE;
  }


  public boolean isSetSetEAttribute() {
    return setField_ == _Fields.SET_EATTRIBUTE;
  }


  public boolean isSetMoveWithinEAttribute() {
    return setField_ == _Fields.MOVE_WITHIN_EATTRIBUTE;
  }


  public boolean isSetRemoveFromEAttribute() {
    return setField_ == _Fields.REMOVE_FROM_EATTRIBUTE;
  }


  public boolean isSetUnsetEAttribute() {
    return setField_ == _Fields.UNSET_EATTRIBUTE;
  }


  public boolean isSetAddToEReference() {
    return setField_ == _Fields.ADD_TO_EREFERENCE;
  }


  public boolean isSetMoveWithinEReference() {
    return setField_ == _Fields.MOVE_WITHIN_EREFERENCE;
  }


  public boolean isSetRemoveFromEReference() {
    return setField_ == _Fields.REMOVE_FROM_EREFERENCE;
  }


  public boolean isSetSetEReference() {
    return setField_ == _Fields.SET_EREFERENCE;
  }


  public boolean isSetUnsetEReference() {
    return setField_ == _Fields.UNSET_EREFERENCE;
  }


  public boolean isSetRegisterEPackage() {
    return setField_ == _Fields.REGISTER_EPACKAGE;
  }


  public boolean isSetAddToResource() {
    return setField_ == _Fields.ADD_TO_RESOURCE;
  }


  public boolean isSetRemoveFromResource() {
    return setField_ == _Fields.REMOVE_FROM_RESOURCE;
  }


  public boolean equals(Object other) {
    if (other instanceof TChangeEvent) {
      return equals((TChangeEvent)other);
    } else {
      return false;
    }
  }

  public boolean equals(TChangeEvent other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TChangeEvent other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
