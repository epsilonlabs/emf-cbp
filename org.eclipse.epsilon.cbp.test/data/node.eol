
var e0 = new Node;
e0.name = "e0";
var e1 = new Node;
e1.name = "e1";
var e2 = new Node;
e2.name = "e2";
if (containedByModel(e2)){
    e2.values.addAll(Collection{0,1,2,3});
}
var e3 = new Node;
e3.name = "e3";
if (containedByModel(e2)){
    RemoveRefToObject(e2)
;    delete e2;
}
if (containedByModel(e0)){
    e0.parent = null;
}
if (containedByModel(e3) and containedByModel(e1) and not isCircular(e3, e1)){
    e3.parent = e1;
}
if (containedByModel(e1)){
    e1.values.remove(0);
}
if (containedByModel(e1)){
    e1.parent = null;
}
if (containedByModel(e0)){
    e0.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e0) and e0.values.size() > 1){
    var toPos = 0;
    var fromPos = 1;
    if (toPos >= e0.values.size()) toPos = e0.values.size() -1;
    if (fromPos >= e0.values.size()) fromPos = e0.values.size() -1;
    e0.values.move(toPos, fromPos);
}
if (containedByModel(e1)){
    e1.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e3) and containedByModel(e1) and not isCircular(e3, e1)){
    e3.parent = e1;
}
if (containedByModel(e3)){
    RemoveRefToObject(e3)
;    delete e3;
}
if (containedByModel(e1)){
    RemoveRefToObject(e1)
;    delete e1;
}
if (containedByModel(e0)){
    RemoveRefToObject(e0)
;    delete e0;
}
var e4 = new Node;
e4.name = "e4";
if (containedByModel(e4) and e4.values.size() > 1){
    var toPos = 2;
    var fromPos = 2;
    if (toPos >= e4.values.size()) toPos = e4.values.size() -1;
    if (fromPos >= e4.values.size()) fromPos = e4.values.size() -1;
    e4.values.move(toPos, fromPos);
}
if (containedByModel(e4) and e4.valNodes.size() > 1){
    var toPos = 3;
    var fromPos = 3;
    if (toPos >= e4.valNodes.size()) toPos = e4.valNodes.size() -1;
    if (fromPos >= e4.valNodes.size()) fromPos = e4.valNodes.size() -1;
    e4.valNodes.move(toPos, fromPos);
}
if (containedByModel(e4) and e4.values.size() > 1){
    var toPos = 2;
    var fromPos = 3;
    if (toPos >= e4.values.size()) toPos = e4.values.size() -1;
    if (fromPos >= e4.values.size()) fromPos = e4.values.size() -1;
    e4.values.move(toPos, fromPos);
}
if (containedByModel(e4)){
    RemoveRefToObject(e4)
;    delete e4;
}
var e5 = new Node;
e5.name = "e5";
if (containedByModel(e5) and e5.values.size() > 1){
    var toPos = 0;
    var fromPos = 0;
    if (toPos >= e5.values.size()) toPos = e5.values.size() -1;
    if (fromPos >= e5.values.size()) fromPos = e5.values.size() -1;
    e5.values.move(toPos, fromPos);
}
var e6 = new Node;
e6.name = "e6";
if (containedByModel(e6) and e6.values.size() > 1){
    var toPos = 2;
    var fromPos = 3;
    if (toPos >= e6.values.size()) toPos = e6.values.size() -1;
    if (fromPos >= e6.values.size()) fromPos = e6.values.size() -1;
    e6.values.move(toPos, fromPos);
}
if (containedByModel(e5) and containedByModel(e6) and not isCircular(e5, e6)){
    e6.parent =e5 ;
    e5.valNodes.add(e6);
}
if (containedByModel(e6) and containedByModel(e5) and not isCircular(e6, e5)){
    e5.parent =e6 ;
    e6.valNodes.add(e5);
}
if (containedByModel(e6)){
    e6.values.remove(3);
}
if (containedByModel(e5)){
    e5.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e5)){
    e5.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e6) and e6.valNodes.size() > 1){
    var toPos = 0;
    var fromPos = 1;
    if (toPos >= e6.valNodes.size()) toPos = e6.valNodes.size() -1;
    if (fromPos >= e6.valNodes.size()) fromPos = e6.valNodes.size() -1;
    e6.valNodes.move(toPos, fromPos);
}
if (containedByModel(e5) and containedByModel(e6) and not isCircular(e5, e6)){
    e6.parent =e5 ;
    e5.valNodes.add(e6);
}
if (containedByModel(e5)){
    e5.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e6) and e6.valNodes.size() > 1){
    var toPos = 2;
    var fromPos = 0;
    if (toPos >= e6.valNodes.size()) toPos = e6.valNodes.size() -1;
    if (fromPos >= e6.valNodes.size()) fromPos = e6.valNodes.size() -1;
    e6.valNodes.move(toPos, fromPos);
}
if (containedByModel(e6)){
    e6.values.remove(2);
}
if (containedByModel(e6)){
    e6.parent = null;
}
if (containedByModel(e5)){
    e5.parent = null;
}
if (containedByModel(e5) and e5.valNodes.size() > 1){
    var toPos = 0;
    var fromPos = 3;
    if (toPos >= e5.valNodes.size()) toPos = e5.valNodes.size() -1;
    if (fromPos >= e5.valNodes.size()) fromPos = e5.valNodes.size() -1;
    e5.valNodes.move(toPos, fromPos);
}
if (containedByModel(e6)){
    e6.parent = null;
}
var e7 = new Node;
e7.name = "e7";
if (containedByModel(e7)){
    RemoveRefToObject(e7)
;    delete e7;
}
if (containedByModel(e5)){
    e5.values.remove(3);
}
if (containedByModel(e5)){
    RemoveRefToObject(e5)
;    delete e5;
}
if (containedByModel(e6)){
    e6.values.remove(3);
}
var e8 = new Node;
e8.name = "e8";
if (containedByModel(e8) and e8.values.size() > 1){
    var toPos = 2;
    var fromPos = 2;
    if (toPos >= e8.values.size()) toPos = e8.values.size() -1;
    if (fromPos >= e8.values.size()) fromPos = e8.values.size() -1;
    e8.values.move(toPos, fromPos);
}
var e9 = new Node;
e9.name = "e9";
if (containedByModel(e8) and containedByModel(e9) and not isCircular(e8, e9)){
    e8.parent = e9;
}
if (containedByModel(e8)){
    e8.values.remove(1);
}
if (containedByModel(e9)){
    e9.values.remove(1);
}
if (containedByModel(e8) and containedByModel(e9) and not isCircular(e8, e9)){
    e8.parent = e9;
}
if (containedByModel(e8) and e8.values.size() > 1){
    var toPos = 3;
    var fromPos = 3;
    if (toPos >= e8.values.size()) toPos = e8.values.size() -1;
    if (fromPos >= e8.values.size()) fromPos = e8.values.size() -1;
    e8.values.move(toPos, fromPos);
}
if (containedByModel(e6)){
    e6.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e9)){
    e9.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e9)){
    e9.values.remove(1);
}
if (containedByModel(e6)){
    e6.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e6) and containedByModel(e9) and not isCircular(e6, e9)){
    e6.parent = e9;
}
var e10 = new Node;
e10.name = "e10";
if (containedByModel(e9) and e9.values.size() > 1){
    var toPos = 3;
    var fromPos = 0;
    if (toPos >= e9.values.size()) toPos = e9.values.size() -1;
    if (fromPos >= e9.values.size()) fromPos = e9.values.size() -1;
    e9.values.move(toPos, fromPos);
}
if (containedByModel(e6) and containedByModel(e10) and not isCircular(e6, e10)){
    e10.parent =e6 ;
    e6.valNodes.add(e10);
}
if (containedByModel(e6)){
    e6.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e10) and containedByModel(e9) and not isCircular(e10, e9)){
    e9.parent =e10 ;
    e10.valNodes.add(e9);
}
var e11 = new Node;
e11.name = "e11";
if (containedByModel(e8)){
    e8.values.remove(0);
}
if (containedByModel(e6)){
    e6.values.remove(1);
}
if (containedByModel(e8) and e8.values.size() > 1){
    var toPos = 1;
    var fromPos = 1;
    if (toPos >= e8.values.size()) toPos = e8.values.size() -1;
    if (fromPos >= e8.values.size()) fromPos = e8.values.size() -1;
    e8.values.move(toPos, fromPos);
}
if (containedByModel(e11)){
    e11.parent = null;
}
if (containedByModel(e10)){
    RemoveRefToObject(e10)
;    delete e10;
}
if (containedByModel(e8) and e8.valNodes.size() > 1){
    var toPos = 0;
    var fromPos = 3;
    if (toPos >= e8.valNodes.size()) toPos = e8.valNodes.size() -1;
    if (fromPos >= e8.valNodes.size()) fromPos = e8.valNodes.size() -1;
    e8.valNodes.move(toPos, fromPos);
}
if (containedByModel(e11) and e11.valNodes.size() > 1){
    var toPos = 1;
    var fromPos = 0;
    if (toPos >= e11.valNodes.size()) toPos = e11.valNodes.size() -1;
    if (fromPos >= e11.valNodes.size()) fromPos = e11.valNodes.size() -1;
    e11.valNodes.move(toPos, fromPos);
}
if (containedByModel(e11) and e11.valNodes.size() > 1){
    var toPos = 3;
    var fromPos = 1;
    if (toPos >= e11.valNodes.size()) toPos = e11.valNodes.size() -1;
    if (fromPos >= e11.valNodes.size()) fromPos = e11.valNodes.size() -1;
    e11.valNodes.move(toPos, fromPos);
}
if (containedByModel(e9)){
    e9.parent = null;
}
if (containedByModel(e6)){
    e6.values.remove(3);
}
if (containedByModel(e11)){
    e11.values.addAll(Collection{0,1,2,3});
}
if (containedByModel(e8)){
    RemoveRefToObject(e8)
;    delete e8;
}
if (containedByModel(e11)){
    e11.parent = null;
}
if (containedByModel(e11) and e11.values.size() > 1){
    var toPos = 3;
    var fromPos = 3;
    if (toPos >= e11.values.size()) toPos = e11.values.size() -1;
    if (fromPos >= e11.values.size()) fromPos = e11.values.size() -1;
    e11.values.move(toPos, fromPos);
}
if (containedByModel(e11)){
    e11.values.remove(3);
}
if (containedByModel(e9)){
    e9.values.remove(1);
}
if (containedByModel(e9) and containedByModel(e6) and not isCircular(e9, e6)){
    e9.parent = e6;
}
if (containedByModel(e9)){
    e9.values.remove(3);
}
var e12 = new Node;
e12.name = "e12";
if (containedByModel(e12) and e12.valNodes.size() > 1){
    var toPos = 0;
    var fromPos = 2;
    if (toPos >= e12.valNodes.size()) toPos = e12.valNodes.size() -1;
    if (fromPos >= e12.valNodes.size()) fromPos = e12.valNodes.size() -1;
    e12.valNodes.move(toPos, fromPos);
}
if (containedByModel(e6) and containedByModel(e12) and not isCircular(e6, e12)){
	"AAA".println();
    e12.parent =e6 ;
    e6.valNodes.add(e12);
}



"Total Node: ".print();Node.all().size().println();

operation isCircular(targetObject, valueObject): Boolean {	var result = false;		for (child in valueObject.valNodes){		if (child == targetObject){			result = true;			break;		}else{			result = isCircular(			targetObject, child);		}	}	return result;}
operation containedByModel(targetObject): Boolean {	
var result = false;	
	if (M.owns(targetObject))
	{		
		result = true;	
	}	
	return result;
}
operation RemoveRefToObject(targetObject){	for (child in targetObject.valNodes){		RemoveRefToObject(child);	}	for (object in M.allContents()){		if (object.parent == targetObject){			object.parent = null;		} 	}}
/*var n0 = new Node;
n0.name = "n0";
var n1 = new Node;
n1.name = "n1";
var n2 = new Node;
n2.name = "n2";
var n3 = new Node;
n3.name = "n3";
var n4 = new Node;
n4.name = "n4";
var n5 = new Node;
n5.name = "n5";
n1.valNodes.addAll(Sequence{n2,n3,n4});
n2.valNodes.add(n5);
n1.valNodes.move(1,0);
delete n3;
delete n2;
delete n4;
//delete n5;
*/



/*
var n1 = M.allContents.selectOne(node | node.name == "n1");
var n5 = new Node; n5.name = "n5";
n1.valNodes.add(n5);
var n2 = M.allContents.selectOne(node | node.name == "n2");
n2.defName = "Hello!";

operation deleteObject(object){
	var i : Integer = object.valNodes.size()-1;
	while (i >= 0){
		var x = object.valNodes.get(i);
		deleteObject(x);
		i -= 1;
	}
	object.name.println();
	delete object;
}*/